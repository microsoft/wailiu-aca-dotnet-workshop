targetScope = 'resourceGroup'

// ------------------
//    PARAMETERS
// ------------------

@description('The location where the resources will be created.')
param location string = resourceGroup().location

@description('Optional. The prefix to be used for all resources created by this template.')
param prefix string = ''

@description('Optional. The suffix to be used for all resources created by this template.')
param suffix string = ''

@description('Optional. The tags to be assigned to the created resources.')
param tags object = {}

// Container Apps Env / Log Analytics Workspace / Application Insights
@description('Optional. The name of the container apps environment. If set, it overrides the name generated by the template.')
param containerAppsEnvironmentName string = '${prefix}cae-${uniqueString(resourceGroup().id)}${suffix}'

@description('Optional. The name of the log analytics workspace. If set, it overrides the name generated by the template.')
param logAnalyticsWorkspaceName string = '${prefix}log-${uniqueString(resourceGroup().id)}${suffix}'

@description('Optional. The name of the application insights. If set, it overrides the name generated by the template.')
param applicationInsightName string = '${prefix}appi-${uniqueString(resourceGroup().id)}${suffix}'

// Servivces
@description('The name of the service for the backend processor service. The name is use as Dapr App ID and as the name of service bus topic subscription.')
param backendProcessorServiceName string

@description('The name of the service for the backend api service. The name is use as Dapr App ID.')
param backendApiServiceName string

@description('The name of the service for the frontend web app service. The name is use as Dapr App ID.')
param frontendWebAppServiceName string

// Service Bus
@description('Optional. The name of the service bus namespace. If set, it overrides the name generated by the template.')
param serviceBusName string = '${prefix}sb-${uniqueString(resourceGroup().id)}${suffix}'

@description('The name of the service bus topic.')
param serviceBusTopicName string

@description('The name of the service bus topic\'s authorization rule.')
param serviceBusTopicAuthorizationRuleName string

// Cosmos DB
@description('Optional. The name of Cosmos DB resource. If set, it overrides the name generated by the template.')
param cosmosDbName string ='${prefix}cosno-${uniqueString(resourceGroup().id)}${suffix}'

@description('The name of Cosmos DB\'s database.')
param cosmosDbDatabaseName string

@description('The name of Cosmos DB\'s collection.')
param cosmosDbCollectionName string

// Azure Stroage
@description('The name of the external Azure Storage Account.')
param storageAccountName string = '${prefix}storage${uniqueString(resourceGroup().id)}${suffix}'

@description('The name of the external Queue in Azure Storage.')
param externalTasksQueueName string

@description('The name of the external blob container in Azure Storage.')
param externalTasksContainerBlobName string

@description('The name of the secret containing the External Azure Storage Access key for the backend processor service.')
param externalStorageKeySecretName string 

//SendGrid
@description('The name of the secret containing the SendGrid API key value for the backend processor service.')
param sendGridKeySecretName string = 'sendgrid-api-key'

@description('The name of the SendGrid Email From.')
param sendGridEmailFrom string

@description('The name of the SendGrid Email From Name.')
param sendGridEmailFromName string

@secure()
@description('The SendGrid API key for the backend processor service. If not provided, SendGrid integration will be disabled.')
param sendGridKeySecretValue string

//Cron Shedule Jon
@description('The cron settings for scheduled job.')
param scheduledJobCron string

// Dapr components
@description('The name of Dapr component for the secret store building block.')
// We disable lint of this line as it is not a secret but the name of the Dapr component
#disable-next-line secure-secrets-in-params
param secretStoreComponentName string

@description('The key vault name store secrets')
param KEYVAULT_NAME string = '${prefix}kv-${uniqueString(resourceGroup().id)}${suffix}'

// Container Registry & Images
@description('The name of the container registry.')
param containerRegistryName string

@description('The image for the backend processor service.')
param backendProcessorServiceImage string

@description('The image for the backend api service.')
param backendApiServiceImage string

@description('The image for the frontend web app service.')
param frontendWebAppServiceImage string

// App Ports
@description('The target and dapr port for the frontend web app service.')
param frontendWebAppPortNumber int = 80

@description('The target and dapr port for the backend api service.')
param backendApiPortNumber int = 80

@description('The dapr port for the backend processor service.')
param backendProcessorPortNumber int = 80

// ------------------
// RESOURCES
// ------------------

module containerAppsEnvironment 'modules/container-apps-environment.bicep' ={
  name: 'containerAppsEnv-${uniqueString(resourceGroup().id)}'
  params: {
   containerAppsEnvironmentName: containerAppsEnvironmentName
   logAnalyticsWorkspaceName: logAnalyticsWorkspaceName
   applicationInsightName: applicationInsightName
    location: location
    tags: {
      tag1 : 'tag1'
    }
  }
}

module keyVault 'modules/key-vault.bicep' = {
  name: 'keyVault-${uniqueString(resourceGroup().id)}'
  params: {
    KEYVAULT_NAME: KEYVAULT_NAME
    location: location
    tags: tags
  }
}

module serviceBus 'modules/service-bus.bicep' = {
  name: 'serviceBus-${uniqueString(resourceGroup().id)}'
  params: {
    serviceBusName: serviceBusName
    location: location
    tags: tags
    serviceBusTopicName: serviceBusTopicName
    serviceBusTopicAuthorizationRuleName: serviceBusTopicAuthorizationRuleName
    backendProcessorServiceName: backendProcessorServiceName
  }
}

module cosmosDb 'modules/cosmos-db.bicep' = {
  name: 'cosmosDb-${uniqueString(resourceGroup().id)}'
  params: {
    cosmosDbName: cosmosDbName
    location: location
    tags: tags
    cosmosDbDatabaseName: cosmosDbDatabaseName
    cosmosDbCollectionName: cosmosDbCollectionName 
  }
}

module externalStorageAccount 'modules/storage-account.bicep' = {
  name: 'storageAccount-${uniqueString(resourceGroup().id)}'
  params: {
    storageAccountName: storageAccountName
    externalTasksQueueName: externalTasksQueueName
    location: location
    tags: tags
  }
}

module daprComponents 'modules/dapr-components.bicep' = {
  name: 'daprComponents-${uniqueString(resourceGroup().id)}'
  params: {
    secretStoreComponentName: secretStoreComponentName 
    containerAppsEnvironmentName: containerAppsEnvironmentName    
    KEYVAULT_NAME: KEYVAULT_NAME    
    serviceBusName: serviceBus.outputs.serviceBusName
    cosmosDbName: cosmosDb.outputs.cosmosDbName
    cosmosDbDatabaseName: cosmosDb.outputs.cosmosDbDatabaseName
    cosmosDbCollectionName: cosmosDb.outputs.cosmosDbCollectionName    
    backendApiServiceName: backendApiServiceName
    backendProcessorServiceName: backendProcessorServiceName
    storageAccountName: storageAccountName
    sendGridKeySecretName: sendGridKeySecretName
    sendGridEmailFrom: sendGridEmailFrom
    sendGridEmailFromName: sendGridEmailFromName
    scheduledJobCron: scheduledJobCron
    externalTasksQueueName: externalTasksQueueName
    externalTasksContainerBlobName: externalTasksContainerBlobName
    externalStorageKeySecretName: externalStorageKeySecretName
  }
  dependsOn: [
    containerAppsEnvironment
  ]
}

module containerApps 'modules/container-apps.bicep' = {
  name: 'containerApps-${uniqueString(resourceGroup().id)}'
  params: {
    location: location
    tags: tags
    backendProcessorServiceName: backendProcessorServiceName
    backendApiServiceName: backendApiServiceName
    frontendWebAppServiceName: frontendWebAppServiceName    
    containerAppsEnvironmentName: containerAppsEnvironmentName
    keyVaultId: keyVault.outputs.keyVaultId
    serviceBusName: serviceBus.outputs.serviceBusName
    serviceBusTopicName: serviceBus.outputs.serviceBusTopicName
    serviceBusTopicAuthorizationRuleName: serviceBus.outputs.serviceBusTopicAuthorizationRuleName    
    cosmosDbName: cosmosDb.outputs.cosmosDbName
    cosmosDbDatabaseName: cosmosDb.outputs.cosmosDbDatabaseName
    cosmosDbCollectionName: cosmosDb.outputs.cosmosDbCollectionName    
    containerRegistryName: containerRegistryName
    backendProcessorServiceImage: backendProcessorServiceImage
    backendApiServiceImage: backendApiServiceImage
    frontendWebAppServiceImage: frontendWebAppServiceImage
    sendGridKeySecretName: sendGridKeySecretName
    sendGridKeySecretValue: sendGridKeySecretValue
    applicationInsightsName: containerAppsEnvironment.outputs.applicationInsightsName
    externalStorageAccountName: externalStorageAccount.outputs.storageAccountName
    externalStorageKeySecretName: externalStorageKeySecretName
    frontendWebAppPortNumber: frontendWebAppPortNumber
    backendApiPortNumber: backendApiPortNumber
    backendProcessorPortNumber: backendProcessorPortNumber
  }
  dependsOn: [
    daprComponents
  ]
}

// ------------------
// OUTPUTS
// ------------------

@description('The name of the container app for the backend processor service.')
output backendProcessorServiceContainerAppName string = containerApps.outputs.backendProcessorServiceContainerAppName

@description('The name of the container app for the backend api service.')
output backendApiServiceContainerAppName string = containerApps.outputs.backendApiServiceContainerAppName

@description('The name of the container app for the front end web app service.')
output frontendWebAppServiceContainerAppName string = containerApps.outputs.frontendWebAppServiceContainerAppName

@description('The FQDN of the front end web app.')
output frontendWebAppServiceFQDN string = containerApps.outputs.frontendWebAppServiceFQDN

@description('The FQDN of the backend web app')
output backendApiServiceFQDN string  = containerApps.outputs.backendApiServiceFQDN

